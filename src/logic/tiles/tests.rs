use super::*;

// TODO: also test is_redundant

// No point in testing 1bpp tiles separately, since they're just subsets of 2bpp tiles.
macro_rules! tile_test {
    ($name:ident: $lhs:expr, $rhs:expr => $($a:tt $($b:ident)?),+) => {
        #[test]
        fn $name() {
            let lhs = IndexedTile($lhs);
            let rhs = IndexedTile($rhs);
            $(tile_test_step!(lhs, $a $($b)?, rhs);)+
        }
    };
}

macro_rules! tile_test_step {
    ($lhs:expr, $method:ident, $rhs:expr) => {
        assert!($lhs.$method(&$rhs));
    };
    ($lhs:expr, !$method:ident, $rhs:expr) => {
        assert!(!$lhs.$method(&$rhs));
    };
}

// A blank tile is perfectly symmetrical
tile_test!(both_blank:
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    ]
 => eq, is_vflip_of, is_hflip_of, is_vhflip_of);

// This pixel kills all symmetries
tile_test!(one_pixel:
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    ]
 => !eq, !is_vflip_of, !is_hflip_of, !is_vhflip_of);

// The arrays are symmetrical, but even bitplanes must be compared with even bitplanes!
tile_test!(wrong_bitplane:
    [
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01
    ]
 => !eq, !is_vflip_of, !is_hflip_of, !is_vhflip_of);

// These are identical if vertically AND horizontally flipped, but not either
tile_test!(vhflip:
    [
        0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00
    ],
    [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00,
        0x00
        ]=>!eq,!is_vflip_of,!is_hflip_of,is_vhflip_of);
